spring:
    datasource:
        url: jdbc:postgresql://localhost:5432/ajo_web_app_db
        username: postgres
        password: ajowebapp

    jpa:
        show-sql: false
        hibernate:
            ddl-auto: update
#            naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 747381386121-k1mn4eck7udj7t1joldn279k3psv3nhq.apps.googleusercontent.com
              clientSecret: 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
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - profile
            facebook:
              clientId: 923280891919681
              clientSecret: 3eadc3a366387d17b178e799fe4a3a1c
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - public_profile
            github:
              clientId: 4dd7ed91a15fbf9de02a
              clientSecret: 27173b131f0dc48bad831db264f7a3c7ae0fc3ed
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - user:email
                - read:user
          provider:
            facebook:
              authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
              tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
              userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
server:
  port: 8080

app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000, http://localhost:8080
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
